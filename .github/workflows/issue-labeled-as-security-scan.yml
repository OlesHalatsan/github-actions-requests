on:
  issues: 
    types: [labeled, unlabeled]
    
jobs:
  security-check:
    runs-on: ubuntu-latest
    #if: github.event.label.name == 'security-check'

    env:
      body: ${{ github.event.issue.body }}

    steps:
    - uses: actions/checkout@v2
    
    - run: |
         echo 'Found the issue that triggered this event with number [${{ github.event.issue.number }}]'
         echo 'Found the issue title [${{ github.event.issue.title }}]'
         echo -e $body

    - uses: actions/github-script@v5
      name: Find action from comment
      id: get-action
      with:
        result-encoding: string
        script: |
            // todo, figure out pagination:

            const owner = context.repo.owner
            const repo = context.repo.repo
            const issue_number = context.issue.number

            // load all comments for this issue
            const comments = await github.rest.issues.listComments({
              owner: owner,
              repo: repo,
              issue_number: issue_number,
            })

            // find the last comment
            let lastItem
            if (comments.data.length > 1) {
              // find latest
              lastItem = comments.data[comments.data.length-1]
            } else {
              lastItem = comments.data
            }

            const body = lastItem.body
            console.log(body)

            let action
            if (!body.startsWith('uses: ')) {              
              console.log('no action found')

              let body = [
                "Couldn't find the action uses statement in the last comment.",
                "Please create a comment that only has `uses: owner/action-name` in it.",
                "",
                ":robot:"
              ]
              
              // create comment letting the user now what to do
              github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: body.join('\n')
              });

              return
            } 

            // todo: search for last space as well to cut off the name at the end for more flexibility
            action = body.substring(6)
            console.log(`Found action with name ${action}`)
            console.log(action)

            // return action
            let index = action.indexOf('/')
            let actionOwner = action.substring(0, index)
            let actionName = action.substring(index+1)

            console.log(`Found owner:${actionOwner}`)
            console.log(`Found action:${actionName}`)

            console.log(`::set-output name=owner::${actionOwner}`)
            console.log(`::set-output name=name::${actionName}`)

    - name: Get result for verification
      run: |
        echo "Owner: ${{steps.get-action.outputs.owner}}"
        echo "Name: ${{steps.get-action.outputs.name}}"

    # todo: add a new comment to the issue indication the action of forking the repo over to the other org?

    - name: Fork the action repository to rajbos-actions-test
      uses: rajbos-actions/forker@v0.0.1
      with:
        token: ${{ secrets.GH_TOKEN }}
        repo: ${{steps.get-action.outputs.name}}
        owner: ${{steps.get-action.outputs.owner}}
        org: rajbos-actions-test # todo: make central parameter

    # since dependabot alerts and dependency graph is enabled on the organization level, we only need to add a CodeQL setup
    # for it we need to inject the default CodeQL config into the forked action repository
    - uses: actions/github-script@v5
      name: Inject CodeQL workflow into new forked repository
      id: CodeQL
      env:
        repo: ${{steps.get-action.outputs.name}}
        org: rajbos-actions-test # todo: make central parameter
      with:      
        github-token: ${{ secrets.GH_TOKEN }}  
        script: |            
            const { repo, org } = process.env
            console.log(`Hello ${org} ${repo}`)
            
            // todo: test if file already exists
            github.rest.repos.createOrUpdateFileContents({
              owner: org,
              repo,
              path: ".github/workflows/codeql-analysis.yml",
              message: "Adding CodeQL setup",
              content: "content needs to go here",
              committer.name: "bot",
              committer.email: "bot",
              author.name: "bot",
              author.email: "bot"
            })

